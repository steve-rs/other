#!/usr/bin/env bash

if ! gem list savon | grep -q "^savon "
then
	#sudo apt-get -y install lib libxml2-dev libxslt-dev # Put into package list
	[ `id -un` eq "root" ] && gem install savon || sudo gem install savon
fi

ruby <<END
#!/usr/bin/env ruby

require 'rubygems'
require 'savon'
require 'pp'

#if ENV['SERVICE_IP'] != "": SERVICE_IP = ENV['SERVICE_IP'] else SERVICE_IP = '127.0.0.1' end
###if ENV['SERVICE_PORT'].has_value?("") then SERVICE_PORT = ENV['SERVICE_PORT'] else SERVICE_PORT = '80' end
#if ENV['SERVICE_GROUP_NAME'] != "": SERVICE_GROUP_NAME = ENV['SERVICE_GROUP_NAME'] else die "Service group name missing!" end
SERVICE_GROUP_NAME = ENV['SERVICE_GROUP_NAME']
if SERVICE_GROUP_NAME == "" then die "Service group name missing!" end
SERVICE_IP = ENV['SERVICE_IP']
if SERVICE_GROUP_NAME == "" then die "Service IP address missing!" end
SERVICE_PORT = ENV['SERVICE_PORT']
if SERVICE_GROUP_NAME == "" then die "Service port missing!" end

print "SERVICE_PORT=", SERVICE_PORT, "\n"

client = Savon::Client.new do
  wsdl.endpoint = "http://10.0.1.30/soap/"
  wsdl.namespace = "urn:NSConfig"
#wsdl.document = "http://www.thomas-bayer.com/axis2/services/BLZService?wsdl"
#wsdl.document = File.expand_path("../NSConfig.wsdl", __FILE__)
end

Savon.configure do |config|
  config.log = false            # disable logging
  config.log_level = :warn      # changing the log level
 # config.logger = Rails.logger  # using the Rails logger
end

HTTPI.log = false

print "Login: "
response = client.request(:login) do
  soap.body = { :username => "nsroot", :password => "nsroot" }
end
print response.to_hash[:login_response][:return][:message], "\n"
if response.to_hash[:login_response][:return][:rc].to_i != 0 then pp response.to_hash end

client.http.headers["Cookie"] = response.http.headers["Set-Cookie"]

# Note Savon normally converts to snake_case unless you pass a string, i.e. "bindservicegroup_ip"
print "Bind service group ip: SERVICE_GROUP_NAME=", SERVICE_GROUP_NAME, " IP=", SERVICE_IP, " PORT=", SERVICE_PORT, ": "
response = client.request("bindservicegroup_ip") do
   soap.body = {
      :servicegroupname => SERVICE_GROUP_NAME,
      :ip => SERVICE_IP,
      :port => SERVICE_PORT
   }
end
print response.to_hash[:bindservicegroup_response][:return][:message], "\n"
if response.to_hash[:bindservicegroup_response][:return][:rc].to_i != 0 then pp response.to_hash end

print "Unbind service group ip: SERVICE_GROUP_NAME=", SERVICE_GROUP_NAME, " IP=", SERVICE_IP, " PORT=", SERVICE_PORT, ": "
response = client.request("unbindservicegroup_ip") do
   soap.body = {
      :servicegroupname => SERVICE_GROUP_NAME,
      :ip => SERVICE_IP,
      :port => SERVICE_PORT
   }
end
print response.to_hash[:unbindservicegroup_response][:return][:message], "\n"
if response.to_hash[:unbindservicegroup_response][:return][:rc].to_i != 0 then pp response.to_hash end

print "Save NS config: "
response = client.request(:savensconfig) 
print response.to_hash[:savensconfig_response][:return][:message], "\n"
if response.to_hash[:savensconfig_response][:return][:rc].to_i != 0 then pp response.to_hash end

print "Logout: "
response = client.request(:logout) 
print response.to_hash[:logout_response][:return][:message], "\n"
if response.to_hash[:logout_response][:return][:rc].to_i != 0 then pp response.to_hash end
END
